<template>
    <!--操作页面的输入组件-->
    <div class="c-cut-input" @keyup.stop>
        <div style="width: 100%; height: 2em;">
            <span class="line-text" :style="`width:${textWidth}%;`">{{lineName}}</span>
            <input ref="input"
                   :class="[error_number?'border-red':'']"
                   :style="`width:${inputWidth}%;`"
                   v-model="input_value"
                   :type="type"
                   @change="input_change"
                   @blur="input_blur"
                   @focus="input_focus"
                   @keyup.enter.stop.prevent="enter_input"/>
        </div>
        <div class="error" :style="`padding-left:${textWidth}%;`">
            <i class="icon-baocuo iconfont red" v-if="error_number"></i>
            <span class="red">{{error_number}}</span>
        </div>
    </div>
</template>
<style lang="stylus" scoped>
    .c-cut-input{
        width: 98%;
        text-align: center;
        margin: 0 auto;
        padding: 0 3%;
        .line-text{
            line-height:2em;
            display: inline;
            float: left;
            margin-right:1%;
        }
        input{
            float: left;
            -web-kit-appearance:none;
            -moz-appearance: none;
            display: block;
            font-size:1em;
            height:2em;
            border-radius:4px;
            border:1px solid #c8cccf;
            padding-left :10px;
        }
        .error{
            width :100%;
            text-align: left;
            line-height: 1em;
            height: 1em;
        }
        .red{
            color: red;
        }
        .border-red{
            border: 1px solid red;
        }
    }

</style>
<script>
    export default {
        data() {
            return {
                input_value:this.value,
                error_number:'',
                timer:null,
                temp:''
            }
        },
        mounted(){
        },
        methods:{
            enter_input(event){
                event.stopPropagation();
                console.log(event);
                console.log(`enter-input`);
                this.$refs.input.blur();
                this.name=event.target.value;
                if(!!this.input_value){
                    if(this.error_number){
                        this.$refs.input.select();
                    }else if(this.errorMessage){
                        this.error_number = this.errorMessage;
                        this.$refs.input.select();
                    }
                }
                this.$emit('enter-input');
                if(this.inputFocus){
                    setTimeout(_=>{
                        this.$refs.input.focus();
                    },300);
                }
            },
            input_change(){
                this.input_value = this.input_value.replace(/(^\s*)|(\s*$)/g,"");
            	if(this.input_value){
                    if(this.type==='number'&&Number(this.input_value)<=0){
                    	if(this.min===0){
                    		console.log(`可以输入0`);
                        }else{
                            this.error_number = `请输入大于0的数值`;
                        }
                    }
                }
            	this.$emit('input-change');
            },
            input_blur(){
                if(!this.input_value){
                    this.error_number = '';
                }
                this.$emit('input-blur');
            },
            input_focus(){
                if(this.input_value){
                    this.$refs.input.select();
                }
            },
        },
        watch:{
            value(val){
                this.input_value = val;
                this.error_number = '';
            },
            input_value(val){
                this.$emit('input',val)
            },
            inputSelect(val){
            	if(val){
            		this.$refs.input.select();
                }
            },
            errorMessage(val){
            	if(val){
            		this.error_number = val;
                    this.$refs.input.select();
                }else{
                    this.error_number = '';
                }
            },
//            'error_number'(val){
//            	if(val){
//            		console.log(`error`,val);
//                    this.$refs.input.select();
//                }
//            }
        },
        props:{
            value:{},
            errorMessage:{ /*显示报错信息*/
                type:String,
                default:'',
            },
            lineName:{},/*input标题*/
            min:{},/*控制0的输入*/
            type:{ /*控制inout的类型,默认是text,可传number*/
                type:String,
                default:'text',
            },
            /* inputSelect控制input的选中,但是只能初始时有用,
            现在页面一般这样控制this.$refs.number.$refs.input.select();
            控制选中ref='number'line-input组件里面的input*/
            inputSelect:{
                type:Boolean,
                default:true,
            },
            inputFocus:{ /*控制focus()*/
                type:Boolean,
                default:false,
            },
            textWidth:{ /*设置标题的width*/
                type:Number,
                default:12,
            },
            inputWidth:{ /*设置input的width*/
                type:Number,
                default:86,
            },
        },
        components: {}
    }
</script>
